#!/usr/bin/env ruby

require 'erb'

COMMANDS = [
    'dev_init',
    'dev',
    'dev_down',
    'cloud_init',
    'cloud',
    'cloud_down'
]

if ARGV.length != 1 || !COMMANDS.include?(ARGV.first.to_s.downcase)
  STDERR.puts "Invalid command"
  STDERR.puts "Usage: #{$0} { #{COMMANDS.join(' | ')} }"
  STDERR.puts
  exit 1
end

@environment = nil

def file_path(path_from_rails_root)
  File.expand_path(File.dirname(__FILE__) + "/../#{path_from_rails_root}")
end

def yml_file
  case @environment
    when 'dev'
      file_path('docker-compose.yml')
    when 'cloud'
      file_path('docker-compose-cloud.yml')
    else
      raise "unknown env"
  end
end

def docker_compose
  if system('which docker-compose >/dev/null 2>&1')
    "docker-compose --file \"#{yml_file}\""
  else
    "fig --file \"#{yml_file}\""
  end
end

def init
  unless system('docker inspect dungeon_db_data')
    puts 'Creating data container...'
    `docker create -v /var/lib/mysql -v /data --name dungeon_db_data mysql:5.6`

    Dir.chdir(file_path('.')) do
      `#{docker_compose} build`
      `#{docker_compose} pull`

      bash_cmd = 'sleep 10 && rake db:create db:migrate db:seed'
      `#{docker_compose} run web1 bash -c "#{bash_cmd}"`
      `#{docker_compose} stop`
      `#{docker_compose} rm --force`
    end
  end
end

def dev_init
  @environment = 'dev'
  init
end

def dev
  @environment = 'dev'
  system "#{docker_compose} up -d"
end

def dev_down
  @environment = 'dev'
  system "#{docker_compose} stop"
end

def cloud_init
  @environment = 'cloud'
  init
end

def cloud
  @environment = 'cloud'
  system "#{docker_compose} up -d"
end

def cloud_down
  @environment = 'cloud'
  system "#{docker_compose} stop"
end


send(ARGV.first.to_s.downcase.to_sym)
